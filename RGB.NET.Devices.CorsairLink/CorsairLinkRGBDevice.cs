using HidLibrary;
using RGB.NET.Core;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;

namespace RGB.NET.Devices.CorsairLink
{
    public class CorsairLinkDevice : AbstractRGBDevice
    {
        public override IRGBDeviceInfo DeviceInfo { get; }

        private HidDevice corsairLNP { get; set; }

        public void Initialize()
        {
            try
            {
                InitializeLed(new CorsairLinkLedId(this), new Rectangle(0, 0, 10, 10));
                HidDevice[] HidDeviceList;
                int[] hids = new int[] { 0x0C0B, 0x0C10 };
                HidDeviceList = HidDevices.Enumerate(0x1B1C, hids).ToArray();

                if (HidDeviceList.Length > 0)
                {
                    corsairLNP = HidDeviceList[0];
                    corsairLNP.OpenDevice(DeviceMode.Overlapped, DeviceMode.Overlapped, ShareMode.ShareRead | ShareMode.ShareWrite);

                    byte[] first1 = new byte[] {0x00,
                   0x38, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

                    byte[] first2 = new byte[] {0x00,
                   0x38, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

                    corsairLNP.Write(first1);
                    corsairLNP.Write(first2);

                }
            }
            catch (System.Exception)
            {
                throw;
            }

            //1 time code
        }

        public CorsairLinkDevice(IRGBDeviceInfo info)
        {
            this.DeviceInfo = info;
        }


        public byte[] Red = new byte[32];
        public byte[] Blue = new byte[32];
        public byte[] Green = new byte[32];
        protected override void UpdateLeds(IEnumerable<Led> ledsToUpdate)
        {
            Led led = ledsToUpdate.FirstOrDefault(x => x.Color.A > 0);
            if (led == null) return;

            try
            {
               BeginUpdate(corsairLNP);

                byte[][] stripInfo = UpdateFourStrips(led.Color, led.Color, led.Color, led.Color);

                for (int i = 0; i < stripInfo.Length; i++)
                {
                    corsairLNP.Write(stripInfo[i]);
                }

                byte[][] fanInfo = UpdateSixFans(led.Color, led.Color, led.Color, led.Color);

                for (int i = 0; i < fanInfo.Length; i++)
                {
                    corsairLNP.Write(fanInfo[i]);
                }

               SubmitUpdate(corsairLNP);
            }
            catch
            {
            }
        }

        public static void BeginUpdate(HidDevice device)
        {
            byte[] first1 = new byte[] {0x00,
                   0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] first2 = new byte[] {0x00,
                   0x34, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            device.Write(first1);
            device.Write(first2);
        }

        public static void SubmitUpdate(HidDevice device)
        {

            byte[] submit = new byte[] {0x00,
                   0x33, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            device.Write(submit);
        }

        internal static byte[][] UpdateFourStrips(Color c1, Color c2, Color c3, Color c4)
        {
            byte[] red = new byte[] {0x00,
                   0x32, 0x01, 0x00, 0x28, 0x00, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c2.R,
                   c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c3.R, c3.R, c3.R, c3.R, c3.R, c3.R, c3.R,
                   c3.R, c3.R, c3.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] green = new byte[] {0x00,
                   0x32, 0x01, 0x00, 0x28, 0x01, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c2.G,
                   c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c3.G, c3.G, c3.G, c3.G, c3.G, c3.G, c3.G,
                   c3.G, c3.G, c3.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] blue = new byte[] {0x00,
                   0x32, 0x01, 0x00, 0x28, 0x02, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c2.B,
                   c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c3.B, c3.B, c3.B, c3.B, c3.B, c3.B, c3.B,
                   c3.B, c3.B, c3.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            return new byte[3][] { red, green, blue };
        }

        internal static byte[][] UpdateSixFans(Color c1, Color c2, Color c3, Color c4)
        {
            byte[] red1 = new byte[] {0x00,
                   0x32, 0x00, 0x00, 0x32, 0x00, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R,
                   c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c1.R, c2.R, c2.R, c2.R,
                   c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c2.R, c3.R, c3.R, c3.R, c3.R, c3.R, c3.R, c3.R,
                   c3.R, c3.R, c3.R, c3.R, c3.R, c4.R, c4.R, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] green1 = new byte[] {0x00,
                   0x32, 0x00, 0x00, 0x32, 0x01, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G,
                   c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c1.G, c2.G, c2.G, c2.G,
                   c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c2.G, c3.G, c3.G, c3.G, c3.G, c3.G, c3.G, c3.G,
                   c3.G, c3.G, c3.G, c3.G, c3.G, c4.G, c4.G, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] blue1 = new byte[] {0x00,
                   0x32, 0x00, 0x00, 0x32, 0x02, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B,
                   c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c1.B, c2.B, c2.B, c2.B,
                   c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c2.B, c3.B, c3.B, c3.B, c3.B, c3.B, c3.B, c3.B,
                   c3.B, c3.B, c3.B, c3.B, c3.B, c4.B, c4.B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] red2 = new byte[] {0x00,
                   0x32, 0x00, 0x32, 0x16, 0x00, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R,
                   c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, c4.R, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] green2 = new byte[] {0x00,
                   0x32, 0x00, 0x32, 0x16, 0x01, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G,
                   c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, c4.G, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            byte[] blue2 = new byte[] {0x00,
                   0x32, 0x00, 0x32, 0x16, 0x02, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B,
                   c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, c4.B, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

            return new byte[6][] { red1, green1, blue1, red2, green2, blue2 };
        }
    }


}

